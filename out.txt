// Source: HtmlSerializer\obj\Debug\net6.0\.NETCoreApp,Version=v6.0.AssemblyAttributes.cs
// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v6.0", FrameworkDisplayName = ".NET 6.0")]
// Source: HtmlSerializer\HtmlElement.cs
using System.Collections.Generic;
namespace HtmlSerializer
{
    internal class HtmlElement
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public List<KeyValuePair<string, string>> Attributes { get; set; }
        public List<string> Classes { get; set; }
        public HtmlElement Parent { get; set; }
        public List<HtmlElement> Children { get; set; }
        public string OriginalLine { get; set; } // Add field to store the original line
        public string InnerText { get; set; } // Add field to store inner text
        public HtmlElement()
        {
            Attributes = new List<KeyValuePair<string, string>>();
            Classes = new List<string>();
            Children = new List<HtmlElement>();
        }
        // Get all descendants of the current element
        public IEnumerable<HtmlElement> Descendants()
        {
            Queue<HtmlElement> queue = new Queue<HtmlElement>();
            queue.Enqueue(this); // Start with the current element
            while (queue.Count > 0)
            {
                HtmlElement current = queue.Dequeue(); // Get the element at the front of the queue
                yield return current; // Return the current element
                // Enqueue all children of the current element
                foreach (var child in current.Children)
                {
                    queue.Enqueue(child);
                }
            }
        }
    }
}
// Source: HtmlSerializer\HtmlHelper.cs
using System;
using System.Collections.Generic;
using System.IO;
namespace HtmlSerializer
{
    internal class HtmlHelper
    {
        private static readonly HtmlHelper _instance = new HtmlHelper();
        public static HtmlHelper Instance => _instance;
        public string[] AllTags { get; private set; }
        public string[] SelfClosingTags { get; private set; }
        public HtmlHelper()
        {
            var allTagsPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Resources", "HtmlTags.json");
            if (!File.Exists(allTagsPath))
            {
                throw new FileNotFoundException("HtmlTags.json file not found.", allTagsPath);
            }
            AllTags = System.Text.Json.JsonSerializer.Deserialize<string[]>(File.ReadAllText(allTagsPath));
            var selfClosingTagsPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Resources", "HtmlVoidTags.json");
            if (!File.Exists(selfClosingTagsPath))
            {
                throw new FileNotFoundException("HtmlVoidTags.json file not found.", selfClosingTagsPath);
            }
            SelfClosingTags = System.Text.Json.JsonSerializer.Deserialize<string[]>(File.ReadAllText(selfClosingTagsPath));
        }
        // Check if the tag name is a valid HTML tag
        public bool IsValidHtmlTag(string tagName)
        {
            return Array.Exists(AllTags, tag => tag.Equals(tagName, StringComparison.OrdinalIgnoreCase));
        }
    }
}
// Source: HtmlSerializer\obj\Debug\net6.0\HtmlSerializer.AssemblyInfo.cs
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Reflection;
[assembly: System.Reflection.AssemblyCompanyAttribute("HtmlSerializer")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("HtmlSerializer")]
[assembly: System.Reflection.AssemblyTitleAttribute("HtmlSerializer")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]
// Generated by the MSBuild WriteCodeFragment class.
// Source: HtmlSerializer\obj\Debug\net6.0\HtmlSerializer.GlobalUsings.g.cs
// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;
// Source: HtmlSerializer\HtmlTreeBuilder.cs
using System.Text.RegularExpressions;
using System.Collections.Generic;
using System.Linq;
namespace HtmlSerializer
{
    internal class HtmlTreeBuilder
    {
        public HtmlElement BuildTree(string html)
        {
            var root = new HtmlElement { Name = "root" };
            var currentElement = root;
            // Clean up the HTML string and split into lines based on tags
            var cleanHtml = Regex.Replace(html, @"\s+", " ");
            var htmlLines = Regex.Split(cleanHtml, @"(<[^>]+>)").Where(s => !string.IsNullOrEmpty(s)).ToArray();
            for (int i = 0; i < htmlLines.Length; i++)
            {
                var line = htmlLines[i];
                var trimmedLine = line.Trim();
                if (string.IsNullOrEmpty(trimmedLine))
                    continue;
                var firstWord = trimmedLine.Split(' ')[0].Replace("<", "").Replace(">", "");
                if (firstWord.Equals("html/", StringComparison.OrdinalIgnoreCase))
                {
                    // End of HTML
                    break;
                }
                if (firstWord.StartsWith("/"))
                {
                    // Closing tag
                    currentElement = currentElement.Parent; // Move up in the tree
                }
                else
                {
                    // Opening tag
                    var isSelfClosing = trimmedLine.EndsWith("/>") || HtmlHelper.Instance.SelfClosingTags.Contains(firstWord);
                    var newElement = new HtmlElement
                    {
                        Name = firstWord,
                        Parent = currentElement,
                        OriginalLine = trimmedLine // Save the original line
                    };
                    currentElement.Children.Add(newElement);
                    // Parse attributes
                    var attributesString = trimmedLine.Substring(firstWord.Length + 1).Trim().TrimEnd('>');
                    ParseAttributes(attributesString, newElement);
                    // Parse inner text if available
                    if (!isSelfClosing && i + 1 < htmlLines.Length && !htmlLines[i + 1].StartsWith("<"))
                    {
                        newElement.InnerText = htmlLines[i + 1].Trim();
                        i++; // Move to the next line
                    }
                    if (!isSelfClosing)
                    {
                        currentElement = newElement; // Move to the new element
                    }
                }
            }
            return root;
        }
        private void ParseAttributes(string attributesString, HtmlElement element)
        {
            var attributePattern = @"(\w+)=""([^""]*)""";
            var matches = Regex.Matches(attributesString, attributePattern);
            foreach (Match match in matches)
            {
                if (match.Groups.Count == 3)
                {
                    var key = match.Groups[1].Value;
                    var value = match.Groups[2].Value;
                    if (key.Equals("id", StringComparison.OrdinalIgnoreCase))
                    {
                        element.Id = value; // Set the ID of the element
                    }
                    else if (key.Equals("class", StringComparison.OrdinalIgnoreCase))
                    {
                        element.Classes.AddRange(value.Split(' ')); // Add classes to the element
                    }
                    else
                    {
                        element.Attributes.Add(new KeyValuePair<string, string>(key, value)); // Add other attributes to the element
                    }
                }
            }
        }
    }
}
// Source: HtmlSerializer\Program.cs
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Threading.Tasks;
using HtmlSerializer;
public class Program
{
    public static async Task Main(string[] args)
    {
        // Load HTML from a URL
        var html = await LoadHtmlAsync("https://www.example.com");
        // Check if the HTML was loaded successfully
        if (string.IsNullOrWhiteSpace(html))
        {
            Console.WriteLine("Failed to load HTML.");
            return;
        }
        // Build the HTML tree
        HtmlTreeBuilder treeBuilder = new HtmlTreeBuilder();
        HtmlElement root = treeBuilder.BuildTree(html);
        // Check the selector
        Selector selector = Selector.FromQueryString("title");
        HashSet<HtmlElement> elements = new HashSet<HtmlElement>();
        GetElementsBySelector(selector, root, elements);
        // Print the results
        if (elements.Count == 0)
        {
            Console.WriteLine("No elements found.");
        }
        else
        {
            foreach (var element in elements)
            {
                Console.WriteLine(BuildElementString(element));
            }
        }
    }
    // Load HTML from a URL
    public static async Task<string> LoadHtmlAsync(string url)
    {
        using HttpClient client = new HttpClient();
        var response = await client.GetAsync(url);
        return await response.Content.ReadAsStringAsync();
    }
    // Get elements by selector
    static void GetElementsBySelector(Selector selector, HtmlElement root, HashSet<HtmlElement> result)
    {
        if (selector == null)
            return;
        foreach (HtmlElement element in root.Descendants())
        {
            if (IsSame(selector, element))
            {
                result.Add(element);
            }
        }
    }
    // Check if the element matches the selector
    static bool IsSame(Selector selector, HtmlElement element)
    {
        if (!string.IsNullOrEmpty(selector.TagName) && selector.TagName != element.Name)
            return false;
        if (!string.IsNullOrEmpty(selector.Id) && selector.Id != element.Id)
            return false;
        if (selector.Classes.Count > 0 && !selector.Classes.All(element.Classes.Contains))
            return false;
        return true;
    }
    // Build the element string in the desired format
    static string BuildElementString(HtmlElement element)
    {
        string attributes = string.Empty;
        if (!string.IsNullOrEmpty(element.Id))
        {
            attributes += $" id=\"{element.Id}\"";
        }
        if (element.Classes.Count > 0)
        {
            attributes += $" class=\"{string.Join(" ", element.Classes)}\"";
        }
        foreach (var attribute in element.Attributes)
        {
            attributes += $" {attribute.Key}=\"{attribute.Value}\"";
        }
        return $"<{element.Name}{attributes}>{element.InnerText}</{element.Name}>";
    }
}
// Source: HtmlSerializer\Selector.cs
using System;
using System.Collections.Generic;
namespace HtmlSerializer
{
    public class Selector
    {
        public string TagName { get; set; }
        public string Id { get; set; }
        public List<string> Classes { get; set; }
        public Selector Parent { get; set; }
        public Selector Child { get; set; }
        public Selector()
        {
            Classes = new List<string>();
        }
        // Create a selector from a query string
        public static Selector FromQueryString(string queryString)
        {
            string[] parts = queryString.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
            Selector root = new Selector();
            Selector current = root;
            foreach (var part in parts)
            {
                string[] subParts = part.Split(new[] { '#', '.' }, StringSplitOptions.None);
                if (subParts.Length > 0)
                {
                    // If the first part is an HTML tag name
                    if (HtmlHelper.Instance.IsValidHtmlTag(subParts[0]))
                    {
                        current.TagName = subParts[0];
                    }
                    // Check if there is an Id
                    if (subParts.Length > 1 && !string.IsNullOrEmpty(subParts[1]))
                    {
                        current.Id = subParts[1];
                    }
                    // Check if there are Classes
                    for (int i = 2; i < subParts.Length; i++)
                    {
                        if (!string.IsNullOrEmpty(subParts[i]))
                        {
                            current.Classes.Add(subParts[i]);
                        }
                    }
                }
                // Create a new Selector object
                Selector child = new Selector();
                current.Child = child;
                child.Parent = current;
                current = child; // Update the current selector
            }
            return root;
        }
    }
}
